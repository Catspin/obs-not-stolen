name: 'BUILD'

on:
  push:
    paths-ignore: ['**.md']
    branches:
      - master
      - macos-camera-extension
      - 'release/**'
    tags: ['*']
  pull_request:
    paths-ignore: ['**.md']
    branches: [master]

env:
  CACHE_REVISION: '006'
  CEF_BUILD_VERSION_MAC: '5060'
  CEF_HASH_MAC_X86_64: '88b950aa0bfc001061c35e7f1f3fefba856a6afb35e38b2b7b42ddd8dd239182'
  CEF_HASH_MAC_ARM64: '98679b92eea6ea9959ac5aa54f46ca60681d8a86c768c35f496dbdd409bf0642'
  CEF_BUILD_VERSION_LINUX: '5060'
  CEF_BUILD_VERSION_WIN: '5060'
  QT_VERSION_MAC: '6.3.1'
  QT_HASH_MAC_X86_64: 'a83f72a11023b03b6cb2dc365f0a66ad9df31163bbb4fe2df32d601856a9fad3'
  QT_HASH_MAC_ARM64: '2f30af90c049670a5660656adbb440668aa1b0567f75a5f29e1def9108928403'
  QT_HASH_MAC_UNIVERSAL: '252e6684f43ab9c6f262c73af739e2296ce391b998da2c4ee04c254aaa07db18'
  QT_VERSION_WIN: '6.3.1'
  DEPS_VERSION_MAC: '2022-08-02'
  DEPS_HASH_MAC_X86_64: '7637e52305e6fc53014b5aabd583f1a4490b1d97450420e977cae9a336a29525'
  DEPS_HASH_MAC_ARM64: '755e0fa69b17a3ae444e1befa9d91d77e3cafe628fbd1c6333686091826595cd'
  DEPS_VERSION_WIN: '2022-08-02'
  VLC_VERSION_MAC: '3.0.8'
  VLC_HASH_MAC: 'e0149ef4a20a19b9ecd87309c2d27787ee3f47dfd47c6639644bc1f6fd95bdf6'
  VLC_VERSION_WIN: '3.0.0-git'
  TWITCH_CLIENTID: ${{ secrets.TWITCH_CLIENT_ID }}
  TWITCH_HASH: ${{ secrets.TWITCH_HASH }}
  RESTREAM_CLIENTID: ${{ secrets.RESTREAM_CLIENTID }}
  RESTREAM_HASH: ${{ secrets.RESTREAM_HASH }}
  YOUTUBE_CLIENTID: ${{ secrets.YOUTUBE_CLIENTID }}
  YOUTUBE_CLIENTID_HASH: ${{ secrets.YOUTUBE_CLIENTID_HASH }}
  YOUTUBE_SECRET: ${{ secrets.YOUTUBE_SECRET }}
  YOUTUBE_SECRET_HASH: ${{ secrets.YOUTUBE_SECRET_HASH }}

jobs:
  macos_build:
    name: '02 - macOS'
    runs-on: [macos-12]
    strategy:
      matrix:
        arch: ['arm64']
    if: always()
    env:
      MACOSX_DEPLOYMENT_TARGET_X86_64: '10.15'
      MACOSX_DEPLOYMENT_TARGET_ARM64: '11.0'
      SPARKLE_VERSION: '1.26.0'
      SPARKLE_HASH: '8312cbf7528297a49f1b97692c33cb8d33254c396dc51be394e9484e4b6833a0'
      MACOS_VIRTUALCAM_DEVICE_UUID: '7626645E-4425-469E-9D8B-97E0FA59AC75'
      MACOS_VIRTUALCAM_STREAM_UUID: 'A8D7B8AA-65AD-4D21-9C42-66480DBFA8E1'
      MACOS_VIRTUALCAM_SINK_UUID: 'A3F16177-7044-4DD8-B900-72E2419F7A9A'
      BLOCKED_FORMULAS: 'speexdsp curl php composer'
      CODESIGN_IDENT: '-'
      HAVE_CODESIGN_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY != '' && secrets.MACOS_SIGNING_CERT != '' }}
    defaults:
      run:
        shell: bash
        working-directory: 'obs-studio'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          path: 'obs-studio'
          fetch-depth: 0

      - name: 'Check for Github Labels'
        if: github.event_name == 'pull_request'
        run: |
          if test -n "$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -s "${{ github.event.pull_request.url }}" | jq -e '.labels[] | select(.name == "Seeking Testers")')"; then
            echo "SEEKING_TESTERS=1" >> $GITHUB_ENV
          else
            echo "SEEKING_TESTERS=0" >> $GITHUB_ENV
          fi

          echo "CACHE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: 'Restore ccache from cache'
        id: ccache-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'ccache-cache'
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ matrix.arch }}-${{ env.CACHE_DATE }}

      - name: 'Restore Chromium Embedded Framework from cache'
        id: cef-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'cef-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/cef_binary_${{ env.CEF_BUILD_VERSION_MAC }}_macos_${{ matrix.arch }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.CEF_BUILD_VERSION_MAC }}-${{ matrix.arch }}-${{ env.CACHE_REVISION }}

      - name: 'Restore VLC dependency from cache'
        id: vlc-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'vlc-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/vlc-${{ env.VLC_VERSION_MAC }}
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.VLC_VERSION_MAC }}-${{ env.CACHE_REVISION }}

      - name: 'Restore Sparkle dependency from cache'
        id: sparkle-cache
        uses: actions/cache@v3
        env:
          CACHE_NAME: 'sparkle-cache'
        with:
          path: ${{ github.workspace }}/obs-build-dependencies/obs-deps/lib/Sparkle.framework
          key: ${{ runner.os }}-pr-${{ env.CACHE_NAME }}-${{ env.SPARKLE_VERSION }}-${{ env.CACHE_REVISION }}

      - name: 'Setup build environment'
        id: setup
        run: |
          REMOVE_FORMULAS=""
          for FORMULA in ${{ env.BLOCKED_FORMULAS }}; do
            if [ -d "/usr/local/opt/${FORMULA}" ]; then
              REMOVE_FORMULAS="${REMOVE_FORMULAS}${FORMULA} "
            fi
          done

          if [ -n "${REMOVE_FORMULAS}" ]; then
            brew uninstall ${REMOVE_FORMULAS}
          fi

          echo "commitHash=$(git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT

      - name: 'Switch to Xcode 14.1'
        run: sudo xcode-select -switch /Applications/Xcode_14.1.app

      - name: 'Install dependencies'
        env:
          RESTORED_VLC: ${{ steps.vlc-cache.outputs.cache-hit }}
          RESTORED_SPARKLE: ${{ steps.sparkle-cache.outputs.cache-hit }}
          RESTORED_CEF: ${{ steps.cef-cache.outputs.cache-hit }}
        run: CI/macos/01_install_dependencies.sh --architecture "${{ matrix.arch }}"

      - name: 'Install Apple Developer Certificate'
        if: ${{ env.HAVE_CODESIGN_IDENTITY == 'true' }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_SIGNING_CERT }}
          P12_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MACOS_SIGNING_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH="${RUNNER_TEMP}/build_certificate.p12"
          PROFILE_PATH="${RUNNER_TEMP}/build_profile.provisionprofile"
          KEYCHAIN_PATH="${RUNNER_TEMP}/app-signing.keychain-db"

          echo -n "${BUILD_CERTIFICATE_BASE64}" | base64 --decode --output "${CERTIFICATE_PATH}"

          # Create temporary keychain
          security create-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          # Set automatic keychain lock timeout to 6 hours
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          # Unlock keychain
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"

          # Import pkcs12 file
          security import "${CERTIFICATE_PATH}" -P "${P12_PASSWORD}" -A -t cert -f pkcs12 -k "${KEYCHAIN_PATH}" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcrun

          # Set partition list
          security set-key-partition-list -S 'apple-tool:,apple:' -k "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}" &> /dev/null

          # Update keychain list and register as login keychain
          security list-keychain -d user -s "${KEYCHAIN_PATH}" 'login-keychain'

          echo "CODESIGN_IDENT=${{ secrets.MACOS_SIGNING_IDENTITY }}" >> $GITHUB_ENV

          if [[ "${BUILD_PROVISION_PROFILE_BASE64}" ]]; then
            echo -n "${BUILD_PROVISION_PROFILE_BASE64}" | base64 --decode --output "${PROFILE_PATH}"

            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            security cms -D -i "${PROFILE_PATH}" -o "${RUNNER_TEMP}/build_profile.plist"
            UUID="$(plutil -extract UUID raw "${RUNNER_TEMP}/build_profile.plist")"
            TEAM_ID="$(plutil -extract TeamIdentifier.0 raw -expect string "${RUNNER_TEMP}/build_profile.plist")"

            cp "${PROFILE_PATH}" ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.provisionprofile
            echo "PROVISIONING_PROFILE=${UUID}" >> $GITHUB_ENV
            echo "CODESIGN_TEAM=${TEAM_ID}" >> $GITHUB_ENV
          fi

      - name: 'Enable Distribution Settings'
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' }}
        run: |
          echo "BUILD_FOR_DISTRIBUTION=ON" >> $GITHUB_ENV
          echo "BUILD_CONFIG=Release" >> $GITHUB_ENV

      - name: Setup tmate session
        if: ${{ matrix.arch == 'arm64' }}
        uses: mxschmitt/action-tmate@v3
        env:
          CODESIGN_IDENT_USER: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          CODESIGN_IDENT_PASS: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
        with:
          limit-access-to-actor: true

      - name: 'Build OBS'
        run: CI/macos/02_build_obs.sh --codesign --architecture "${{ matrix.arch }}"

      - name: 'Create build artifact'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        env:
          CODESIGN_IDENT_USER: ${{ secrets.MACOS_NOTARIZATION_USERNAME }}
          CODESIGN_IDENT_PASS: ${{ secrets.MACOS_NOTARIZATION_PASSWORD }}
        run: |
          CI/macos/03_package_obs.sh --codesign --architecture "${{ matrix.arch }}"
          ARTIFACT_NAME=$(/usr/bin/find . -type f -name "obs-studio-*.dmg" -depth 2 | head -1)
          CI/macos/03_package_obs.sh --notarize-image ${ARTIFACT_NAME}
          echo "FILE_NAME=$(basename ${ARTIFACT_NAME})" >> $GITHUB_ENV

      - name: 'Upload build Artifact'
        if: ${{ success() && (github.event_name != 'pull_request' || env.SEEKING_TESTERS == '1') }}
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-macos-${{ matrix.arch }}-${{ steps.setup.outputs.commitHash }}'
          path: '${{ github.workspace }}/obs-studio/build/${{ env.FILE_NAME }}'
